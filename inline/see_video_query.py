from api import bot
from telebot import types

from main import change

import pytz
from datetime import datetime

import log

from database import user

from camera.weather import locations, check_cloudiness
from camera.get_image import get_camera_image, send_image_to_telegram

from commands.menu import menu

places = ["–¶–§–û", "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥(–°–ó–§–û)", "–Æ–≥ –†–æ—Å—Å–∏–∏", "–ü–æ–≤–æ–ª–∂—å–µ", "–£—Ä–∞–ª", "–°–∏–±–∏—Ä—å", "–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫"]

place = [
    "–ö–∞–ª—É–≥–∞", "–ú–æ—Å–∫–≤–∞", "–ü–æ–ø–æ–≤–æ", "–†—è–∑–∞–Ω—å", "–¢—É–ª–∞", "–£—Ç–∫–∏–Ω–æ", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å", "–í–∞—Å–∫–µ–ª–æ–≤–æ",
    "–ì—É–ª—å–∫–µ–≤–∏—á–∏", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–¢—ã—Ä–Ω–∞—É–∑", "–í–æ–ª–æ–≥–¥–∞", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–†—É—Å—Å–∫–æ–µ", 
    "–ê–∑–µ–≤–æ", "–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫", "–ë–µ—Ä–µ–∑–Ω–∏–∫–∏", "–ò—Ä–±–∏—Ç", "–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π", "–ü–µ—Ä–º—å",
    "–û—Å—Ç—Ä–æ–ª–µ–Ω—Å–∫–∏–π", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–ê–π—Ö–∞–ª", "–ë–∞–≥–¥–∞—Ä–∏–Ω", "–°—Ç—Ä–µ–∂–µ–≤–æ–π", "–Æ—Ä–≥–∞", "–ü—è—Ç–∏—Ä–µ—á—å–µ", "–ü—Ä–æ–≤–∏–¥–µ–Ω–∏—è"
    ]

place_dict = {
    "–¶–§–û":["–ö–∞–ª—É–≥–∞", "–ú–æ—Å–∫–≤–∞", "–ü–æ–ø–æ–≤–æ", "–†—è–∑–∞–Ω—å", "–¢—É–ª–∞", "–£—Ç–∫–∏–Ω–æ", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å"],
    "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥(–°–ó–§–û)":["–í–∞—Å–∫–µ–ª–æ–≤–æ", "–í–æ–ª–æ–≥–¥–∞", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–†—É—Å—Å–∫–æ–µ"],
    "–Æ–≥":["–ì—É–ª—å–∫–µ–≤–∏—á–∏", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–¢—ã—Ä–Ω–∞—É–∑"],
    "–ü–æ–≤–æ–ª–∂—å–µ":["–ê–∑–µ–≤–æ", "–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫", "–ë–µ—Ä–µ–∑–Ω–∏–∫–∏", "–ò—Ä–±–∏—Ç", "–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π", "–ü–µ—Ä–º—å"],
    "–£—Ä–∞–ª":["–û—Å—Ç—Ä–æ–ª–µ–Ω—Å–∫–∏–π", "–ß–µ–ª—è–±–∏–Ω—Å–∫"],
    "–°–∏–±–∏—Ä—å":["–ê–π—Ö–∞–ª", "–ë–∞–≥–¥–∞—Ä–∏–Ω", "–°—Ç—Ä–µ–∂–µ–≤–æ–π", "–Æ—Ä–≥–∞"],
    "–î–∞–ª—å–Ω–∏–π":["–ü—è—Ç–∏—Ä–µ—á—å–µ", "–ü—Ä–æ–≤–∏–¥–µ–Ω–∏—è"]
}



MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def moscow_time():
    now = datetime.now(MOSCOW_TZ)
    return now.strftime("%Y-%m-%d %H:%M:%S")

def see_what(call, query):

    change(call.message, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∫–∞–º–µ—Ä—ã –≤ —Ç–µ—Ö –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –Ω–µ—Ç –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö?", reply_markup=types.InlineKeyboardMarkup(
        [[types.InlineKeyboardButton("–í—Å–µ –∫–∞–º–µ—Ä—ã", callback_data="see all"),
          types.InlineKeyboardButton("–ö–∞–º–µ—Ä—ã –±–µ–∑ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏", callback_data="see dont")]]
    ))

def all_camera(call):
    global places
    markup = types.InlineKeyboardMarkup(row_width=1)

    for i in range(len(places)):
        button = types.InlineKeyboardButton(text=places[i], callback_data=f"see_place {places[i]}")
        markup.add(button)
    markup.add(types.InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="see_video"))
    change(call.message, "–í –∫–∞–∫–æ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–º –º–µ—Å—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã?", reply_markup=markup)

def place_camera(call, query):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for i in range(len(place_dict[query[0]])):
        print(place_dict[query[0]][i])
        button = types.InlineKeyboardButton(text=place_dict[query[0]][i], callback_data=f"seen {place_dict[query[0]][i]}")
        markup.add(button)
    markup.add(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="see all"))
    user.save_user_markup(call.message.chat.id, markup)
    change(call.message, "–ö–∞–∫—É—é –∫–∞–º–µ—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=markup)        

def dont_camera(call):

    change(call.message, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏, –æ–∂–∏–¥–∞–π—Ç–µ...")
    markup = types.InlineKeyboardMarkup(row_width=1)
    has_cameras = False

    log.check("----------------", "WEATHER")
    time = moscow_time()
    log.check(f"Start check at {time}", "WEATHER")
    for location, coords in locations.items():
        lat, lon = coords["lat"], coords["lon"]
        result = check_cloudiness(lat, lon, location)
        if result:
            button = types.InlineKeyboardButton(text=location, callback_data=f"seen {location}")
            markup.add(button)
            has_cameras = True
    log.check("----------------", "WEATHER")
    markup.add(types.InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="see_video"))
    if has_cameras:
        user.save_user_markup(call.message.chat.id, markup)
        change(call.message, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É:", reply_markup=markup)
    else:
        change(call.message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä –±–µ–∑ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏.", reply_markup=markup)

def what_camera(call, query):
    if query[0] == "all":
        all_camera(call)
    elif query[0] == "dont":
        dont_camera(call)

def camera(call, query):
    change(call.message, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–π—Ç–µ...")
    image_bytes = get_camera_image(query[0])
    if image_bytes:
        bot.delete_message(call.message.chat.id, call.message.id)
        send_image_to_telegram(image_bytes, call.message.chat.id)
        bot.send_message(call.message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã {query[0]}", reply_markup=types.InlineKeyboardMarkup(
            [[types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu"),
             types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞–º–µ—Ä", callback_data=f"return_camera")]]
        ))
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞")



def return_camera(call, query):
    if not user.get_user_markup(call.message.chat.id):
        all_camera(call)
        return
    markup = user.get_user_markup(call.message.chat.id)
    change(call.message, "–í—ã–±—Ä–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É:", markup)